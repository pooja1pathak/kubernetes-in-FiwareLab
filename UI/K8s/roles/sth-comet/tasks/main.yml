---
# tasks file for sth-comet
- name: Create a k8s namespace
  k8s:
    name: "{{ k8s_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
    wait: yes

- name: Create a directory for sth-comet nfs if it does not exist
  file:
    path: "{{item}}"
    state: directory
    mode: '0755'
  with_items:
    - /opt/sth-mongo/vol/0
    - /opt/sth-mongo/vol/1
    - /opt/sth-mongo/vol/2

- name: check exports line for sth-comet mongo
  lineinfile:
    path: /etc/exports
    line: '/opt/sth-mongo *(rw,sync,no_root_squash,no_all_squash)'


- name: restart and enable nfs-server services
  systemd:
    name: "{{ item }}"
    state: reloaded
    enabled: yes
  with_items:
    - nfs-server
  when: ansible_os_family == 'RedHat'

- name: restart and enable nfs-kernel-server services
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - nfs-kernel-server
  when: ansible_os_family == 'Debian'

- name: Create a directory if it does not exist
  file:
    path: /tmp/sth-mongo
    state: directory
    mode: '0755'

- name: copying kube-mongo-statefulset.sh with permissions
  template:
    src: templates/kube-mongo-statefulset.sh
    dest: /tmp/sth-mongo/
    owner: root
    group: root
    mode: 0777

- name:  create configmap 
  command: kubectl create  configmap --namespace {{k8s_namespace}}  sthmongo2configmap --from-file=/tmp/sth-mongo/kube-mongo-statefulset.sh
  ignore_errors: yes

- name: Read definition file from the Ansible controller file system after Jinja templating and deploy PV,PVC for sth mongodb
  k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
    wait: yes
    apply: yes
  with_items:
    - templates/volume1.yaml
    - templates/volume2.yaml
    - templates/volume3.yaml

- name: create k8 sth-comet service 
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/fiware-sth2-comet-service.yaml') }}"
    wait: yes
    apply: yes

- name: create k8 mongo2 statefulset
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/mongo-statefulset.yaml') }}"
    wait: yes
    apply: yes
    wait_timeout: 400

- name: retry for get  Mongo2 Statefulset  Status replicas until it is 3
  k8s_facts:
    name: mongo2
    kind: StatefulSet
    namespace: "{{ k8s_namespace }}"
  register: mongo2_sts
  until: mongo2_sts.resources[0].status.replicas == 3
  retries: 40
  delay: 5
  ignore_errors: yes

- name : pausing for 30 seconds
  pause: 
     seconds: 30

- name: retry for get  Mongo2 Statefulset  Status readyReplicas until it is 3
  k8s_facts:
    name: mongo2
    kind: StatefulSet
    namespace: "{{ k8s_namespace }}"
  register: mongo2_sts
  until: mongo2_sts.resources[0].status.readyReplicas == 3
  retries: 20
  delay: 3
 
- name:  run kube-mongo-statefulset.sh in mongo2-0 for HA 
  command: kubectl exec --namespace {{k8s_namespace}} -it mongo2-0 /opt/kube-mongo-statefulset.sh
  register: result

- name: create k8 sth-comet deployment
  k8s:
    state: present
    definition: "{{ lookup('template', 'templates/fiware-sth2-comet-deployment.yaml') }}"
    wait: yes
    apply: yes
    wait_timeout: 300
    wait_condition:
      type: Available
      status: True
